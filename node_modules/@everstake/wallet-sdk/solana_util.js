
const bs58 = require("bs58");

async function unstake(address, lamports) {
    try {
    const delegations = await getDelegations(address);
    console.log(delegations.result);
    console.log(delegations.result[0].account);

    console.log(delegations.result[0].account.data.parsed);
    } catch (error) {
        console.log(error);
        throw new Error(error);
    }
}

async function withdraw_multiple(address, lamports) {


}

// TODO add summarised balances 
async function stakeBalances(sender) {
    const delegations = await getDelegations(sender);
       
    let stakeAccounts = delegations.result.map((delegationAcc) => {
        let state = stakeAccountState(delegationAcc.account.data, epochInfo.epoch);
        switch (state) {
            case StakeState.Active:
                
                break;
            case NETWORKS.Devnet:
               
                break;
            default:
                throw new Error(`Unsupported network ${network}`);
        }

        // let isActive = !(isLockupInForce(acc.account.data.info.meta,  epochInfo.epoch, tm) ||
        // stakeAccountState(acc.account.data, epochInfo.epoch) !== StakeState.Active);
        return {pubkey: delegationAcc.pubkey, account: parsedAccountInfoToStakeAccount(delegationAcc.account)};
    });
    return {
        // StakeState.Inactive: 1
    }
}




const start = async function() {
    // totalActiveStake = new BigNumber(0);
    // console.log(totalActiveStake.isPositive());
    // return;
    // const l = await unstake('', 'GzDmgVCX3QHtZ2bdqLtSFunt321KUWZSGP72KuQ7MX9L', 10000000, 'null');
    // const l = await unstake('', 'DA8wiutFv84vqjyZvUawTPHHoGU6sDbLcV82TKQujfaS', 14000000, 'null');

    // const l = await claim('DA8wiutFv84vqjyZvUawTPHHoGU6sDbLcV82TKQujfaS', 0);
    // const l = await claim('GzDmgVCX3QHtZ2bdqLtSFunt321KUWZSGP72KuQ7MX9L', 0);

    selectNetwork(NETWORKS.Mainnet);
    console.log(rpcURL, VALIDATOR_ADDRESS);
    
    selectNetwork(NETWORKS.Devnet);
    console.log(rpcURL, VALIDATOR_ADDRESS);
    
    const privateKey = bs58.decode('619G6W.....XaWz4');
    const from = web3.Keypair.fromSecretKey(privateKey);

    const l = await delegate('', '2epyttTop1iHCc1h2GnkTbcLEBDjehwfyb2P8UYsH7Y2', 10000000, 'G3aykUZasFqVYFm1PrFQzUM4eDgDSzc3HRp6Vf6ttvLm');
    const signature = await web3.sendAndConfirmTransaction(
        connection,
        l.result,
        [from],
      );
      
    console.log('SIGNATURE', signature);
    // formatSource('0');
    // console.log(l.result.message.staticAccountKeys);
}

// Call start
start();
// 5b9LhSYh8yNWXVeuhffNjNmKv9KBi6gtzHGaDrD7gTPi



const start = async function() {
    console.log(new Lockup(+null, null, PublicKey.default));
    // console.log(Date.now() / 1000 | 0);
    // return
    selectNetwork(NETWORKS.Devnet);
    console.log(rpcURL, VALIDATOR_ADDRESS);
    connect();

    const privateKey = bs58.decode('2PvSsjy6B6ZRNakV3K4AsjSu7R5QFGwjwofJTrWkLmt4queJ1dPzLHhjtSQHMhwPYkAxFi2tq7hgNCTYSrCzen4e');
    const privateKey2 = bs58.decode('52Wu22QnKcJMFFqitKkoRdCKMin5xXqrGoG6DnwPcPczXpa9RVsoduDyVTyLg65ysHGTSeotRvW1mDk152f1ufoC');
    
    const from = Keypair.fromSecretKey(privateKey);
    const from2 = Keypair.fromSecretKey(privateKey2);

    console.log("   ✅ - Start delegate");
    let result = await stake('', from.publicKey.toString(), LAMPORTS_PER_SOL / 100, '123');
    // const l = await redelegate('2epyttTop1iHCc1h2GnkTbcLEBDjehwfyb2P8UYsH7Y2', 'G3aykUZasFqVYFm1PrFQzUM4eDgDSzc3HRp6Vf6ttvLm', '0');
   
    // console.log( result.result);
    let msg = TransactionMessage.decompile(result.result.message);
    // console.log(msg);

    console.log(msg.instructions.length);
    var newArray = msg.instructions.slice();
    newArray.unshift(SystemProgram.transfer({
        fromPubkey: from2.publicKey,
        toPubkey: from.publicKey,
        lamports: LAMPORTS_PER_SOL / 100,
      }));
    
    msg.instructions = newArray;
    console.log(msg.instructions.length);
    
    const messageV0 = msg.compileToV0Message();
    result.result = new VersionedTransaction(messageV0);
    // return
    let tx = result.result;

    // const transaction = new Transaction().add(
    //     SystemProgram.transfer({
    //         fromPubkey: from.publicKey,
    //         toPubkey: from2.publicKey,
    //         lamports: LAMPORTS_PER_SOL / 100,
    //       }),
    //       SystemProgram.transfer({
    //         fromPubkey: from2.publicKey,
    //         toPubkey: from.publicKey,
    //         lamports: LAMPORTS_PER_SOL / 100,
    //       }),
    // );
    
    // // tx.feePayer = from.publicKey;
    // let tx = await prepareTransaction(transaction.instructions, from.publicKey, []);
    // console.log(tx);
    tx.sign([from2]);
    // new Transaction().add(

    //   );
    // Step 3 - Sign your transaction with the required `Signers`
    tx.sign([from]);
    console.log("   ✅ - Transaction Signed");
    
    // console.log(tx.message.instructions);
    return;
    // Step 4 - Send our v0 transaction to the cluster
    const txid = await connection.sendTransaction(tx, { maxRetries: 5 });
    console.log("   ✅ - Transaction sent to network");
    console.log('SIGNATURE', txid);
}

// Call start
start();


const start = async function() {
    console.log(new Lockup(+null, null, PublicKey.default));
    // console.log(Date.now() / 1000 | 0);
    // return
    selectNetwork(NETWORKS.Devnet);
    console.log(rpcURL, VALIDATOR_ADDRESS);
    connect();

    const privateKey = bs58.decode('2PvSsjy6B6ZRNakV3K4AsjSu7R5QFGwjwofJTrWkLmt4queJ1dPzLHhjtSQHMhwPYkAxFi2tq7hgNCTYSrCzen4e');
    const privateKey2 = bs58.decode('52Wu22QnKcJMFFqitKkoRdCKMin5xXqrGoG6DnwPcPczXpa9RVsoduDyVTyLg65ysHGTSeotRvW1mDk152f1ufoC');
    
    const from = Keypair.fromSecretKey(privateKey);
    const from2 = Keypair.fromSecretKey(privateKey2);

    console.log("   ✅ - Start delegate");
    let result = await createAccount(from.publicKey.toString(), LAMPORTS_PER_SOL / 100, '123');
    // let result = await stake('', from.publicKey.toString(), LAMPORTS_PER_SOL / 100, '123');
    // const l = await redelegate('2epyttTop1iHCc1h2GnkTbcLEBDjehwfyb2P8UYsH7Y2', 'G3aykUZasFqVYFm1PrFQzUM4eDgDSzc3HRp6Vf6ttvLm', '0');
   
    console.log( result.result);
    return
    let msg = TransactionMessage.decompile(result.result.versionedTX.message);
    // let msg = TransactionMessage.decompile(result.result.message);
    // console.log(msg);

    console.log(msg.instructions.length);
    var newArray = msg.instructions.slice();
    newArray.unshift(SystemProgram.transfer({
        fromPubkey: from2.publicKey,
        toPubkey: from.publicKey,
        lamports: LAMPORTS_PER_SOL / 100,
      }));
    
    msg.instructions = newArray;
    console.log(msg.instructions.length);
    
    const messageV0 = msg.compileToV0Message();
    result.result = new VersionedTransaction(messageV0);
    // return
    let tx = result.result;

    // const transaction = new Transaction().add(
    //     SystemProgram.transfer({
    //         fromPubkey: from.publicKey,
    //         toPubkey: from2.publicKey,
    //         lamports: LAMPORTS_PER_SOL / 100,
    //       }),
    //       SystemProgram.transfer({
    //         fromPubkey: from2.publicKey,
    //         toPubkey: from.publicKey,
    //         lamports: LAMPORTS_PER_SOL / 100,
    //       }),
    // );
    
    // // tx.feePayer = from.publicKey;
    // let tx = await prepareTransaction(transaction.instructions, from.publicKey, []);
    // console.log(tx);
    tx.sign([from2]);
    // new Transaction().add(

    //   );
    // Step 3 - Sign your transaction with the required `Signers`
    tx.sign([from]);
    console.log("   ✅ - Transaction Signed");
    
    // console.log(tx.message.instructions);
    // return;
    // Step 4 - Send our v0 transaction to the cluster
    const txid = await connection.sendTransaction(tx, { maxRetries: 5 });
    console.log("   ✅ - Transaction sent to network");
    console.log('SIGNATURE', txid);
}

// Call start
start();